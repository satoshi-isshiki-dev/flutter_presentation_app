import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io';

import '/domain/entity/base_entity_model.dart';
import '/domain/api_client/api_client_exception.dart';
import '/domain/services/local_storage_service.dart';
import '/domain/entity/entities.dart';

class ApiClient {
  static const _host = 'https://jsonplaceholder.typicode.com';
  late final SharedPreferencesStorage localStorageManager;

  static ApiClient? _instance;

  ApiClient._() {
    localStorageManager = SharedPreferencesStorage.instance();
  }

  factory ApiClient.instance() {
    _instance ??= ApiClient._();
    return _instance!;
  }

  // ! Working with SharedPreferences data
  /* -------------------------------------------------------------------------- */
  Future<void> _removeLocalStorageData(String key) async =>
      await localStorageManager.removeData(key);
  Future<String?> _getLocalStorageData(String key) async =>
      await localStorageManager.readData(key);
  Future<void> _saveLocalStorageData(String key, String data) async =>
      await localStorageManager.saveData(key, data);
  /* -------------------------------------------------------------------------- */

  // ! Network helpers
  /* -------------------------------------------------------------------------- */
  Uri _makeUri(String path, [Map<String, dynamic>? parameters]) {
    final uri = Uri.parse('$_host$path');
    return parameters != null ? uri.replace(queryParameters: parameters) : uri;
  }

  // ? HTTP GET
  Future<List<T>> _get<T>(
    String path,
    T Function(dynamic json) parser, {
    bool? isCaching,
    String localStorageKey = 'key',
    Map<String, dynamic>? parameters,
  }) async {
    if (isCaching == false) await _removeLocalStorageData(localStorageKey);

    final localData = await _getLocalStorageData(localStorageKey);
    if (localData != null && localData.isNotEmpty) {
      return _jsonParser<T>(localData, parser);
    }

    final url = _makeUri(path, parameters);

    try {
      final response = await http.get(url);
      final resultData = response.body;
      return await _response<T>(
          response, resultData, isCaching, parser, localStorageKey);
    } on SocketException {
      throw FetchDataException(
          'üò≤ –û–¥–Ω–∞–∫–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ—Ç!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üëÜ');
    }
  }

  // ? HTTP POST
  Future<List<T>> _post<T extends BaseModel>(
    String path,
    T entity,
    T Function(dynamic json) parser, {
    bool? isCaching,
    String localStorageKey = 'key',
    Map<String, dynamic>? urlParameters,
  }) async {
    try {
      final response = await http.post(
        _makeUri(path, urlParameters),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: jsonEncode(entity.toJson()),
      );

      // ! –ù—É –≤–æ—Ç –µ—Å–ª–∏ –±—ã, API –¥–µ–ª–∞–ª –Ω–µ —Ñ–µ–π–∫–æ–≤—ã–π POST, —Ç–æ —Ç–æ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±—ã–ª–∞ –±—ã
      // ! –ê —Å–µ–π—á–∞—Å –≤–æ—Ç ü§∑‚Äç‚ôÇÔ∏è ü§∑‚Äç‚ôÇÔ∏è ü§∑‚Äç‚ôÇÔ∏è ... (—Ç–∞–∫ –∫–∞–∫ –≤ –¢–ó –Ω–∞–ø–∏—Å–∞–Ω–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ LocalStorage —Å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ID)
      // –¢.–µ. POST –∑–∞–ø—Ä–æ—Å –¥–µ–ª–∞–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, —á—Ç–æ–±—ã –±—ã–ª (–æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ)
      // –ê –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é –≤ —Å—Ç–æ—Ä–∞–∂ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ...

      String resultData = jsonEncode(entity.toJson());
      // String resultData = response.body;

      if (isCaching == true) {
        resultData = await updateLocalStorageData(localStorageKey, resultData);
      }

      return await _response<T>(
          response, resultData, isCaching, parser, localStorageKey);
    } on SocketException {
      throw FetchDataException('–û–¥–Ω–∞–∫–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!');
    }
  }

  /* -------------------------------------------------------------------------- */
  // todo –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å (—Å–∫–æ—Ä–µ–π –≤—Å–µ–≥–æ —á–µ—Ä–µ–∑ –¥–∞—Ç–∞-–∫–ª–∞—Å—Å—ã)
  //* –ó–¥–µ—Å—å –Ω–µ–º–Ω–æ–≥–æ "–¥–∏—á–∏" –Ω–∞ —Å–∫–æ—Ä—É—é —Ä—É–∫—É, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—É—Ç–µ–º –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
  Future<String> updateLocalStorageData(
      String localStorageKey, String response) async {
    final localData = await _getLocalStorageData(localStorageKey);
    final resultData = localData == null
        ? '[response]'
        : localData.replaceRange(
            localData.length - 1, localData.length, ', $response]');
    return resultData;
  }
  // ! –í—ã—à–ª–∞ –µ—â—ë –±–æ–ª—å—à–∞—è –¥–∏—á—å ... :(
  // Future<String> updateLocalStorageData<T extends BaseModel>(
  //   String localStorageKey, response, parser) async {
  // final localData = await _getLocalStorageData(localStorageKey);
  // final json = jsonDecode(localData!);
  // final List<T> result = json.map(parser).cast<T>().toList();
  // result.add(response);
  // return '[${result.map((T obj) => obj.toJson()).join(',')}]';
  // }
  /* -------------------------------------------------------------------------- */

  Future<List<T>> _response<T>(
    http.Response response,
    String resultData,
    bool? isCaching,
    Function(dynamic json) parser,
    String localStorageKey,
  ) async {
    switch (response.statusCode) {
      case 200:
      case 201:
        if (isCaching == true) {
          await _saveLocalStorageData(localStorageKey, resultData);
        }
        return _jsonParser<T>(resultData, parser);
      case 400:
        throw BadRequestException(resultData.toString());
      case 500:
      default:
        throw FetchDataException('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–∏ —Ç–∞–∫: ${response.statusCode}');
    }
  }

  List<T> _jsonParser<T>(String data, Function(dynamic json) parser) {
    final json = jsonDecode(data);
    if (json is List) {
      return json.map(parser).cast<T>().toList();
    } else if (json is Map) {
      return [parser(json)];
    } else {
      return [];
    }
  }
  /* -------------------------------------------------------------------------- */

  // ! GET data from net
  /* -------------------------------------------------------------------------- */
  Future<List<User>> getUsers({isCaching}) => _get(
        '/users/',
        (json) => User.fromJson(json),
        isCaching: isCaching ?? true,
        localStorageKey: SharedPreferencesStorageKeys.usersKey,
      );
  Future<List<Post>> getUserPosts(int userId, {isCaching}) => _get(
        '/users/$userId/posts',
        (json) => Post.fromJson(json),
        isCaching: isCaching ?? true,
        localStorageKey: '${SharedPreferencesStorageKeys.postsKey}_$userId',
      );
  Future<List<Album>> getUserAlbums(int userId, {isCaching}) => _get(
        '/users/$userId/albums',
        (json) => Album.fromJson(json),
        isCaching: isCaching ?? true,
        localStorageKey: '${SharedPreferencesStorageKeys.albumsKey}_$userId',
      );
  Future<List<Comment>> getPostComments(int postId, {isCaching}) => _get(
        '/posts/$postId/comments',
        (json) => Comment.fromJson(json),
        isCaching: isCaching ?? true,
        localStorageKey: '${SharedPreferencesStorageKeys.commentsKey}_$postId',
      );
  Future<List<Photo>> getAlbumPhotos(int albumId, {isCaching}) => _get(
        '/albums/$albumId/photos',
        (json) => Photo.fromJson(json),
        isCaching: isCaching ?? true,
        localStorageKey: '${SharedPreferencesStorageKeys.photosKey}_$albumId',
      );
  /* -------------------------------------------------------------------------- */

  // ! POST data to net
  /* -------------------------------------------------------------------------- */
  Future<List<Comment>> addPostComment({required Comment comment, isCaching}) {
    return _post<Comment>(
      '/posts/${comment.postId}/comments',
      comment,
      (json) => Comment.fromJson(json),
      isCaching: isCaching ?? true,
      localStorageKey:
          '${SharedPreferencesStorageKeys.commentsKey}_${comment.postId}',
    );
  }
  /* -------------------------------------------------------------------------- */
}
